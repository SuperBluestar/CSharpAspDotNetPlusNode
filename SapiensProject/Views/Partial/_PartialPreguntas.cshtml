
<div class="modal fade" id="ModalVerExamen">
    <div class="modal-dialog modal-xl" role="document">
        <div class="modal-content" style="border-radius: 6px;">
            <div class="modal-header with-border" id="header_admin_rub">
                <h4 class="modal-title"><span>Prueba</span></h4>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close"><i class="fa fa-remove (alias) fa-2x"></i></button>
            </div>
            <div class="modal-body" style="overflow: auto; max-height: calc(100vh - 150px);">
                <div class="pleaseWaitDiv" style="display: none;">
                    <div>
                        <span data-i18n="header.t18">Por favor espere...&nbsp;</span><div></div>
                    </div>
                </div>
                @RenderPage("../Partial/_PartialExamen.cshtml")
            </div>
            <div class="modal-footer"></div>
        </div>
    </div>
</div>
@*<div class="row">
    <div class="col-12">
        <div class="card" style="margin-bottom: 0;padding-right: 16px; padding-bottom: 20px; padding-left: 16px; padding-top: 20px;">
            <div class="row">
                <div class="col-md-4" style="display:flex;">
                    <div class="todo-icon" style="background-color: rgb(62, 66, 83); width: 40px; height: 40px; border-radius: 50%; display: flex; align-items: center; justify-content: center;">
                        <svg width="24px" height="24px" viewBox="0 0 24 24" name="quiz-icon"><path fill="#fff" fill-rule="evenodd" stroke="none" stroke-width="1" id="Icon/small/quiz" d="M6 4h12a2 2 0 012 2v12a2 2 0 01-2 2H6a2 2 0 01-2-2V6a2 2 0 012-2zm1.5 13h7a.5.5 0 100-1h-7a.5.5 0 100 1zm0-2h9a.5.5 0 100-1h-9a.5.5 0 100 1zm2.92-5.717a.8.8 0 10-1.131 1.131l2.262 2.263 3.96-3.96a.8.8 0 10-1.131-1.131l-2.829 2.828-1.13-1.131z"></path></svg>
                    </div>
                    <div style="margin: 0 16px;overflow: hidden;">
                        <div style="font-size: 1.5rem;font-weight: 500;line-height: 40px;text-overflow: ellipsis;overflow: hidden;white-space: nowrap;">
                            <span style="font-size: 1.2rem;font-weight: 500;line-height: 40px;white-space: nowrap;" id="AdDetalleSpan"></span>
                        </div>
                    </div>
                </div>
                <div class="col-md-8">
                    <div class="float-right">
                        <a href="AulaVirtual?tp=1" class="btn btn-primary hidden-lg-down">Ir a Classroom</a>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>*@
<div class="row">
    <div class="col-12">
        <br />
        <div class="card">
            <ul class="nav nav-tabs customtab justify-content-center" role="tablist">
                <li class="nav-item"> <a class="nav-link " onclick="DespliegaPagina()" data-toggle="tab" href="" role="tab"><span class="hidden-sm-up"><svg viewBox="0 0 24 24" focusable="false" width="24" height="24" class=" NMm5M hhikbc"><path d="M7 15h7v2H7zm0-4h10v2H7zm0-4h10v2H7z"></path><path d="M19 3h-4.18C14.4 1.84 13.3 1 12 1c-1.3 0-2.4.84-2.82 2H5c-.14 0-.27.01-.4.04a2.008 2.008 0 0 0-1.44 1.19c-.1.23-.16.49-.16.77v14c0 .27.06.54.16.78s.25.45.43.64c.27.27.62.47 1.01.55.13.02.26.03.4.03h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zm-7-.25c.41 0 .75.34.75.75s-.34.75-.75.75-.75-.34-.75-.75.34-.75.75-.75zM19 19H5V5h14v14z"></path></svg>Prueba</span> <span class="hidden-xs-down"><svg viewBox="0 0 24 24" focusable="false" width="24" height="24" class=" NMm5M hhikbc"><path d="M7 15h7v2H7zm0-4h10v2H7zm0-4h10v2H7z"></path><path d="M19 3h-4.18C14.4 1.84 13.3 1 12 1c-1.3 0-2.4.84-2.82 2H5c-.14 0-.27.01-.4.04a2.008 2.008 0 0 0-1.44 1.19c-.1.23-.16.49-.16.77v14c0 .27.06.54.16.78s.25.45.43.64c.27.27.62.47 1.01.55.13.02.26.03.4.03h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zm-7-.25c.41 0 .75.34.75.75s-.34.75-.75.75-.75-.34-.75-.75.34-.75.75-.75zM19 19H5V5h14v14z"></path></svg> Prueba</span></a> </li>
                <li class="nav-item"> <a class="nav-link active" data-toggle="tab" href="#home4" role="tab"><span class="hidden-sm-up"><svg viewBox="0 0 24 24" focusable="false" width="24" height="24" class="mxmXhf NMm5M hhikbc"><path d="M3 5v14h17V5H3zm4 2v2H5V7h2zm-2 6v-2h2v2H5zm0 2h2v2H5v-2zm13 2H9v-2h9v2zm0-4H9v-2h9v2zm0-4H9V7h9v2z"></path></svg> Notas</span> <span class="hidden-xs-down"><svg viewBox="0 0 24 24" focusable="false" width="24" height="24" class="mxmXhf NMm5M hhikbc"><path d="M3 5v14h17V5H3zm4 2v2H5V7h2zm-2 6v-2h2v2H5zm0 2h2v2H5v-2zm13 2H9v-2h9v2zm0-4H9v-2h9v2zm0-4H9V7h9v2z"></path></svg> Trabajo de los Alumnos</span></a> </li>
            </ul>
            <div class="tab-content">
                <div class="tab-pane" id="home1" role="tabpanel">
                    <div class="card-body" style="padding-top: .5rem;">
                    </div>
                    @*RenderPage("../Partial/_PartialExamenProfesor.cshtml")*@
                </div>
                <div class="tab-pane active" id="home4" role="tabpanel">
                    <div class="card-header d-flex justify-content-between align-items-start">
                        <h4 class="card-title w-100" id="toolTipHeader_updatedialog"></h4>
                        <p class="desc_pmheader"></p>
                    </div>
                    <div class="card-body" style="padding-top: .5rem;">
                        <p id="toolTipBody_updatedialog"></p>
                        <div class="form-group">
                            <div class="table-responsive">
                                <div class="pleaseWaitDiv" style="display: none;">
                                    <div>
                                        <span data-i18n="header.t18">Por favor espere...&nbsp;</span><div></div>
                                    </div>
                                </div>
                                <table id="tblNotaEstudiantes" class="table table-striped" style="font-size:13px;">
                                    <thead>
                                        <tr>
                                            <td>Alumno</td>
                                            <td style="text-align: center;">Finalizar</td>
                                            <td style="text-align: center;">Examen</td>
                                            <td style="text-align: center;" class="_TdNota">Puntos</td>
                                            <td style="text-align: center;" class="_TdNota">Nota</td>
                                            <td style="text-align: center;">Fecha Leído</td>
                                        </tr>
                                    </thead>
                                    <tbody></tbody>
                                </table>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
<input id="idAgenda" type="hidden" />
    <script>
        var idTask = QueryStringCustom.y_;
        var idSubnivel = QueryStringCustom.s_;
        var alumnos
        var tareas
        var notaminima
        var notamaxima

        examen = new Object(Examen)
        examen.obtenerRespuestaModelo()
        examen.obtenerPreguntaModelo()
        examen.idTask = idTask
        examen.editable = false
        examen.generarExamen(examenModeloJSON)
        //examen.readExamen()
        //VistaPrevia()


        obtenerNotaMinMaxStalin(setearNotaMinMaxStalin, idSubnivel)


        function DespliegaPagina() {
            location.href = "PreguntasEditar?y_=" + idTask + "&s_=" + idSubnivel;
        }

        function setearNotaMinMaxStalin(data) {
            var counter = 0;
            var objArray = $.parseJSON(data.d);
            var arrayLength = objArray.length;
            while (counter < arrayLength) {
                notaminima = objArray[counter].NotaMinima;
                notamaxima = objArray[counter].NotaMaxima;
                break
            }
            getTareas()
        }
        function getAlumnosTarea() {
            var parameters = { "idTask": idTask };
            jQueryAjaxCallback("../Shared/Utility.aspx/AlumnosFromTask", JSON.stringify(parameters), "POST", "json", postGetAlumnosTarea);
        }
        function postGetAlumnosTarea(data) {
            $('#tblNotaEstudiantes tbody').empty();
            var textoJson = data.d
            alumnos = JSON.parse(textoJson)
            $('#AdDetalleSpan').text(alumnos[0].Grupo);
            $('#toolTipHeader_updatedialog').text(alumnos[0].NombreActividad);//ArrayAlumnos[0].Actividad
            $('.desc_pmheader').text('Fecha Inicio: ' + moment(alumnos[0].FechaInicioActividad).format('D MMM'));//Fecha_Entrega
            enlazarAlumnosTareas()
        }
        function getTareas() {
            var parameters = { "idTask": idTask };
            jQueryAjaxCallback("../Shared/Utility.aspx/TaskParaFromTask", JSON.stringify(parameters), "POST", "json", postGetTareas);
        }
        function postGetTareas(dataTareas) {
            console.log(dataTareas)
            var textoJson = dataTareas.d;
            var c = 1;
            tareas = JSON.parse(textoJson)
            console.log(tareas[0].idAgenda)
            $('#idAgenda').val(tareas[0].idAgenda);
            getAlumnosTarea();
            //SaveNotas(tareas)

        }
        function enlazarAlumnosTareas() {
            var c = 1;
            alumnos.forEach(function (alumno) {
                var idUsuario = alumno.id
                tareas.forEach(function (tarea) {
                    if (tarea.idUsuario == idUsuario)
                        alumno.tarea = tarea
                })
            })
            alumnos.forEach(function (alumno) {
                $('#tblNotaEstudiantes').append(getRow(alumno, c))
                c++;
            })
        }
        function AbrirModalExamenAlumno(examenTexto) {
            examenTexto = esc_unquot(examenTexto)
            var examenjson = JSON.parse(examenTexto)
            examen.activo = false
            examen.mostrarRespuestas = true
            examen.generarExamen(examenjson)
            $('#ModalVerExamen').modal('show');
            //abrir modal
            //cargar examen de estudiante con resultado
        }
        //function SaveNotas(tareas) {
        //    getAlumnosTarea()
        //    var xml = '<notas>';
        //    tareas.forEach(function (tarea) {
        //        var examen = new Object(Examen);
        //        var examenTexto = tarea.examen
        //        if (examenTexto == undefined) return
        //        var examenjson = JSON.parse(examenTexto)
        //        //puntos
        //        var puntosobtenidos = examen.puntosExamen(examenjson)
        //        var puntosTotales = examen.puntosExamenTotales(examenjson)
        //        var nota = notaFromPuntos(notaminima, notamaxima, puntosobtenidos, puntosTotales)
        //        var id = tarea.idUsuario
        //        xml += '<estudiante idUsuario="' + id + '" nota="' + nota + '" puntos="' + puntosobtenidos+'"  notaText=""/>';
        //    })
        //    xml += '</notas>';

        //    var exitSubmit = false;
        //    //var parameters = { "idTask": idTask, "xmlNotas": xml, "FechaAccion": GetDate() };
        //    var parameters = {
        //        "idAsignatura": -1, "idSubnivel": -1, "idPeriodo": -1,
        //        "idAgenda": $('#idAgenda').val(),
        //        "xmlNotas": xml, "lectura": 1, "FechaAccion": GetDate(), "origen": "CLASSROOM"
        //    };
        //    jQueryAjaxCallback("../Shared/Utility.aspx/actualizarNotas", JSON.stringify(parameters), "POST", "json", getAlumnosTarea);
        //}
        function PostNota(data) {
        }
        function getRow(alumno, c) {
            var fila = $('<tr>')
            var col
            var nota = notaDefault()
            var examenTexto = examenDafault()
            var puntosAlumno = puntosAlumnoDefault()
            var puntosTotales = puntosTotalesDefault()
            var fechaLeido = fechaLeidoDefault()

            //col.text(c + '. ' + alumno.NombreCompleto)
            var notat = alumno.Nota
            if (notat != -1) {
                nota = alumno.Nota;
                nota = truncar(nota, 1)
            }
            var exament
            if (alumno.tarea != undefined) {
                exament = alumno.tarea.examen
                
                if (alumno.tarea.Leido) {                    
                    fechaLeido = moment(alumno.tarea.FechaLeido).format('D MMM h:mm a')
                }
                if (exament != undefined) {
                    
                    var examen = new Object(Examen);
                    examenTexto = exament
                    var examenjson = JSON.parse(examenTexto)
                    puntosTotales = examen.puntosExamenTotales(examenjson)
                    puntosAlumno = examen.puntosExamen(examenjson)
                }
            }


            col = $('<td></td>')
            col.html('<span class="text-aqua" style="font-weight:bold;">' + c + '. ' + alumno.Apellido + '</span>' +
                '<p style="line-height: 0.7;font-size: 11.5px;color: #999;margin-bottom: 0;" > ' + alumno.Nombre + '</p>');
            fila.append(col)
         
            col = $('<td style="text-align:center;"></td>')
            var botonFinalizar = '<button  class="btn btn-primary btn-sm waves-effect waves-light" onclick="calificarExamen(\'' + ((examenTexto != examenDafault()) ? esc_quot(esc_json(examenTexto)) : null) + '\',' + alumno.id + ') ">Finalizar</button>';

            if (alumno.tarea == undefined) {
                col.html(botonFinalizar);
                console.log('tarea indefinida, alumno: ' + alumno.Apellido)
            } else { 
                var fecha = alumno.tarea.Fecha_Entrega
                 if (moment(Date.now()).isAfter(fecha))
                 {
                    if (alumno.tarea.Entregado == false) {
                        col.html(botonFinalizar);
                    } else {
                        col.html('Finalizado');
                    }
                 } else {
                     console.log('aún no se cumple fecha entrega')
                 }
            }
            fila.append(col)

            col = $('<td style="text-align:center;"></td>')
            if (examenTexto != examenDafault()) {
                col.html('<a href="#" class="text-aqua"  onclick="AbrirModalExamenAlumno(\'' + esc_quot(esc_json(examenTexto)) + '\' );">Ver Examen</a>')
            } else {
                col.text(examenTexto)
            }
            fila.append(col)
            col = $('<td style="text-align:center;"></td>')
            //col = $('<td style="text-align:center;">' + puntosAlumno + '/' + puntosTotales + '</td>')
            col.text(puntosAlumno + ' / ' + puntosTotales)
            fila.append(col)
            col = $('<td style="text-align:center;"></td>')
            col.text(nota)
            fila.append(col)
            col = $('<td style="text-align:center;"></td>')
            col.text(fechaLeido)
            fila.append(col)

            return fila
        }

        function notaDefault() {
            return '-'
        }
        function examenDafault() {
            return '-'
        }
        function puntosAlumnoDefault() {
            return '-'
        }
        function puntosTotalesDefault() {
            return '-'
        }
        function fechaLeidoDefault() {
            return '-'
        }
        function calificarExamen(examenTexto, alumnoId) {
            examenTexto = esc_unquot(examenTexto);
            var examenjson = null;
            var puntosobtenidos = 0;
            var puntosTotales = 1;
            
            examen.entregado = 1
            examen.idTask = idTask;
            examen.callbackGuardarExamen = function () {    //esto se ejecuta cuando se haya guardado el examen
                var nota = notaFromPuntos(notaminima, notamaxima, puntosobtenidos, puntosTotales)
                var xml = '<notas><estudiante idUsuario="' + alumnoId + '" nota="' + nota + '" puntos="' + puntosobtenidos + '" notaText=""/></notas>';
                //var parameters = { "idTask": idTask, "xmlNotas": xml, "FechaAccion": GetDate() };
                var parameters = {
                    "idAsignatura": -1, "idSubnivel": -1, "idPeriodo": -1,
                    "idAgenda": $('#idAgenda').val(),
                    "xmlNotas": xml, "lectura": 1, "FechaAccion": GetDate(), "origen": "CLASSROOM"
                };
                jQueryAjaxCallback("../Shared/Utility.aspx/actualizarNotas", JSON.stringify(parameters), "POST", "json", PostNota);
            }
            
            if (examenTexto == "null")
            {
                examen.activo = false
                examen.mostrarEditable(false);
                examen.callbackReadExamen = function () {
                    examen.saveExamen(alumnoId);    //se guarda examen despues de leerlo
                }
                examen.readExamen() //carga examen modelo. revisar si funciona con idTask solamente (SI FUNCIONA)
                return
            } else {
                console.log('examen no es null')
                examenjson = JSON.parse(examenTexto);
                examen.generarExamen(examenjson);
                puntosobtenidos = examen.puntosExamen(examenjson);
                puntosTotales = examen.puntosExamenTotales(examenjson);
                examen.saveExamen(alumnoId);    //se guarda examen
            }
        }
        function PostNota(data) {
            var ioi = 0;
            obtenerNotaMinMaxStalin(setearNotaMinMaxStalin, idSubnivel);
        }
</script>